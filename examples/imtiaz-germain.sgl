(program
    (func is-prime 
        (let n ARG1)
        (let result true)
        
        (for-each i (range 2 (+ (to-int (math:sqrt n)) 1) 1)
            (if (== (% n i) 0)
                (let result false)
                (pass)
            )
        )

        result
    )

    (func is-germain-prime
        (let a ARG1)
        (let b (+ (* 2 a) 1))
        (let c (+ (* 2 b) 1))
        (let d (+ (* 2 c) 1))
        (let result false)

        ;(print-line (format "a: ARG1, b: ARG2, c: ARG3, d: ARG4" a b c d))

        (func is-not-prime (not (is-prime ARG1)))
        (func a-and-b-are-primes (and (is-prime a) (is-prime b)))
        (func c-d-check (and (is-not-prime c) (is-prime d)))
        (if (and (a-and-b-are-primes) (c-d-check))
            (print-line a)
            (pass)
        )
        
        result
    )

    ;(print-line (is-prime 119))
    ;(print-line (is-germain-prime 10))
    ;(print-line (is-germain-prime 29))
    (for-each x (range 1 1000 1)
        (is-germain-prime x)
    )
)